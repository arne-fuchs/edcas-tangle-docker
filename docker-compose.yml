#
# node-docker-setup v1.0.3
# https://github.com/iotaledger/node-docker-setup
#

version: '3'
services:

##################################################################
#  HORNET - Stardust                                             #
##################################################################

  hornet:
    container_name: hornet
    image: iotaledger/hornet:2.0.1
    ulimits:
      nofile:
        soft: 16384
        hard: 16384
    stop_grace_period: 5m
    depends_on:
      traefik:
        condition: service_started
    ports:
      - "15600:15600/tcp"
      - "14626:14626/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hornet.service=hornet"
      - "traefik.http.routers.hornet.rule=Host(`${NODE_HOST:-localhost}`)"
      - "traefik.http.routers.hornet.entrypoints=web"
      - "traefik.http.services.hornet.loadbalancer.server.port=14265"
      - "traefik.http.routers.hornet.middlewares=redirect-dashboard"
      - "traefik.http.middlewares.redirect-dashboard.redirectregex.regex=^(https?://[^/]+)/?$$"
      - "traefik.http.middlewares.redirect-dashboard.redirectregex.replacement=$$1/dashboard/"
      - "traefik.http.middlewares.redirect-dashboard.redirectregex.permanent=true"

    cap_drop:
      - ALL
    volumes:
      - ./${HORNET_CONFIG_FILE}:/app/config.json:ro
      - ./peering.json:/app/peering.json
      - ./data:/app/data
    command:
      - "-c"
      - "config.json"
      - "--db.path=data/database"
      - "--p2p.db.path=data/p2pstore"
      - "--p2p.bindMultiAddresses=/ip4/0.0.0.0/tcp/15600,/ip6/::/tcp/15600"
      - "--snapshots.fullPath=data/snapshots/full_snapshot.bin"
      - "--snapshots.deltaPath=data/snapshots/delta_snapshot.bin"
      - "--inx.enabled=true"
      - "--inx.bindAddress=hornet:9029"
      - "--prometheus.enabled=true"
      - "--prometheus.bindAddress=hornet:9311"
    profiles:
      - edcas

##################################################################
#  Reverse Proxy and SSL                                         #
##################################################################

  traefik:
    container_name: traefik
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--metrics.prometheus=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "${HTTP_PORT:-80}:80/tcp"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/letsencrypt:/letsencrypt"

##################################################################
#  Monitoring                                                    #
##################################################################

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    user: "65532"
    volumes:
      - ./data/prometheus/:/prometheus
      - ./assets/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - /etc/localtime:/etc/localtime:ro
    profiles:
      - monitoring

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    privileged: true
    command: 
      - --housekeeping_interval=30s    # kubernetes default args
      - --max_housekeeping_interval=35s
      - --event_storage_event_limit=default=0
      - --event_storage_age_limit=default=0
      - --store_container_labels=false
      - --global_housekeeping_interval=30s
      - --event_storage_event_limit=default=0
      - --event_storage_age_limit=default=0
      - --disable_metrics=accelerator,advtcp,cpu_topology,disk,hugetlb,memory_numa,percpu,referenced_memory,resctrl,sched,tcp,udp
      - --enable_load_reader=true
      - --docker_only=true          # only show stats for docker containers
      - --allow_dynamic_housekeeping=true
      - --storage_duration=1m0s
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    profiles:
      - monitoring

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "65532"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${NODE_HOST:-localhost}`) && (Path(`/grafana`) || PathPrefix(`/grafana/`))"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    environment:
      - GF_SERVER_ROOT_URL=/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_DOMAIN=${NODE_HOST:-localhost}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/node_dashboard.json
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./assets/grafana/:/etc/grafana/provisioning/
    profiles:
      - monitoring

##################################################################
#  INX Extensions                                                #
#  disable them out by commenting out the services               #
##################################################################

  inx-indexer:
    container_name: inx-indexer
    image: iotaledger/inx-indexer:1.0
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      hornet:
        condition: service_healthy
    volumes:
      - ./data:/app/database
    command:
      - "--inx.address=hornet:9029"
      - "--indexer.db.sqlite.path=database/indexer"
      - "--restAPI.bindAddress=inx-indexer:9091"
      - "--prometheus.enabled=true"
      - "--prometheus.bindAddress=inx-indexer:9312"
    profiles:
      - edcas

  inx-mqtt:
    container_name: inx-mqtt
    image: iotaledger/inx-mqtt:1.0
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      hornet:
        condition: service_healthy
    command:
      - "--inx.address=hornet:9029"
      - "--mqtt.websocket.bindAddress=inx-mqtt:1888"
      - "--prometheus.enabled=true"
      - "--prometheus.bindAddress=inx-mqtt:9312"
    profiles:
      - edcas

  inx-participation:
    container_name: inx-participation
    image: iotaledger/inx-participation:1.0
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      hornet:
        condition: service_healthy
    ulimits:
      nofile:
        soft: 16384
        hard: 16384
    volumes:
      - ./data:/app/database
    command:
      - "--inx.address=hornet:9029"
      - "--participation.db.path=database/participation"
      - "--restAPI.bindAddress=inx-participation:9892"
    profiles:
      - edcas

  inx-poi:
    container_name: inx-poi
    image: iotaledger/inx-poi:1.0
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      hornet:
        condition: service_healthy
    command:
      - "--inx.address=hornet:9029"
      - "--restAPI.bindAddress=inx-poi:9687"
    profiles:
      - edcas

  inx-dashboard:
    container_name: inx-dashboard
    image: iotaledger/inx-dashboard:1.0
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hornet-dashboard.service=hornet-dashboard"
      - "traefik.http.routers.hornet-dashboard.rule=Host(`${NODE_HOST:-localhost}`) && (Path(`/dashboard`) || PathPrefix(`/dashboard/`))"
      - "traefik.http.routers.hornet-dashboard.entrypoints=web"
      - "traefik.http.services.hornet-dashboard.loadbalancer.server.port=8081"
    volumes:
      - ./data:/app/database
    command:
      - "--inx.address=hornet:9029"
      - "--dashboard.bindAddress=inx-dashboard:8081"
      - "--dashboard.auth.identityFilePath=/app/database/dashboard/identity.key"
      - "--dashboard.auth.username=${DASHBOARD_USERNAME:-admin}"
      - "--dashboard.auth.passwordHash=${DASHBOARD_PASSWORD:-0000000000000000000000000000000000000000000000000000000000000000}"
      - "--dashboard.auth.passwordSalt=${DASHBOARD_SALT:-0000000000000000000000000000000000000000000000000000000000000000}"
      - "--prometheus.enabled=true"
      - "--prometheus.bindAddress=inx-dashboard:9312"
    profiles:
      - edcas

##################################################################
#  WASP                                                          #
##################################################################

  wasp:
    container_name: wasp
    image: iotaledger/wasp:1.0-rc
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      hornet:
        condition: service_healthy
      inx-indexer:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wasp-api.service=wasp-api"
      - "traefik.http.routers.wasp-api.rule=Host(`${NODE_HOST:-localhost}`) && (Path(`/wasp/api`) || PathPrefix(`/wasp/api/`))"
      - "traefik.http.routers.wasp-api.entrypoints=web"
      - "traefik.http.services.wasp-api.loadbalancer.server.port=9090"
      - "traefik.http.routers.wasp-api.middlewares=rewrite-wasp-api"
      - "traefik.http.middlewares.rewrite-wasp-api.stripprefix.prefixes=/wasp/api"
    ports:
      - "4000:4000/tcp" # Peering
    volumes:
      - ./data/wasp:/app/waspdb
    command:
      - "--logger.level=debug"
      - "--inx.address=hornet:9029"
      - "--db.chainState.path=/app/waspdb/chains/data"
      - "--p2p.identity.filePath=/app/waspdb/identity/identity.key"
      - "--p2p.db.path=/app/waspdb/p2pstore"
      - "--registries.chains.filePath=/app/waspdb/chains/chain_registry.json"
      - "--registries.dkShares.path=/app/waspdb/dkshares"
      - "--registries.trustedPeers.filePath=/app/waspdb/trusted_peers.json"
      - "--registries.consensusState.path=/app/waspdb/chains/consensus"
      - "--wal.path=/app/waspdb/wal"
      - "--prometheus.enabled=true"
      - "--prometheus.bindAddress=wasp:9312"
    profiles:
      - wasp

  wasp-dashboard:
    container_name: wasp-dashboard
    image: iotaledger/wasp-dashboard:latest
    stop_grace_period: 5m
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wasp-dashboard.service=wasp-dashboard"
      - "traefik.http.routers.wasp-dashboard.rule=Host(`${NODE_HOST:-localhost}`) && (Path(`/wasp/dashboard`) || PathPrefix(`/wasp/dashboard/`))"
      - "traefik.http.routers.wasp-dashboard.entrypoints=web"
      - "traefik.http.services.wasp-dashboard.loadbalancer.server.port=80"
      - "traefik.http.routers.wasp-dashboard.middlewares=rewrite-wasp-dashboard"
      - "traefik.http.middlewares.rewrite-wasp-dashboard.stripprefix.prefixes=/wasp/dashboard"
    environment:
      - WASP_API_URL=http://${NODE_HOST:-localhost}/wasp/api
      - L1_API_URL=http://${NODE_HOST:-localhost}
    profiles:
      - wasp

  ##################################################################
  #  COORDINATOR                                                   #
  ##################################################################
  inx-coordinator:
    container_name: inx-coordinator
    image: iotaledger/inx-coordinator:1.0-rc
    depends_on:
      hornet:
        condition: service_healthy
    env_file:
      - .coordinator_env
    volumes:
      - ./data/state:/app/state
    command:
      - "--inx.address=hornet:9029"
      - "--coordinator.stateFilePath=state/coordinator.state"
      - "--coordinator.blockBackups.enabled=false"
    profiles:
      - coor
  create-keys:
    container_name: create-keys
    image: iotaledger/hornet:2.0.1
    volumes:
      - ./protocol_parameters.json:/app/protocol_parameters.json:ro
      - ./genesis:/app/genesis
    command:
      - "tool"
      - "ed25519-key"
      - "--hrp=edcas"
    profiles:
      - genesis
  create-snapshots:
    container_name: create-snapshots
    image: iotaledger/hornet:2.0.1
    volumes:
      - ./protocol_parameters.json:/app/protocol_parameters.json:ro
      - ./data/snapshots:/app/snapshots
    command:
      - "tool"
      - "snap-gen"
      - "--protocolParametersPath=/app/protocol_parameters.json"
      - "--mintAddress=edcas1qrp5nflv9yxm6hdgjh8sht0mxjhkngsuf0uu66h8u2yx8lnhlnzu7dxxprd"
      - "--outputPath=/app/snapshots/full_snapshot.bin"
    profiles:
      - snapshots
  bootstrap-network:
    container_name: bootstrap-network
    image: iotaledger/hornet:2.0.1
    env_file:
      - ".coordinator_env"
    volumes:
      - ./config_edcas.json:/app/config_hornet.json:ro
      - ./data/snapshots:/app/snapshots
      - ./data/database:/app/privatedb
      - ./data/state:/app/state
    command:
      - "tool"
      - "bootstrap-private-tangle"
      - "--configFile=/app/config_hornet.json"
      - "--snapshotPath=/app/snapshots/full_snapshot.bin"
      - "--databasePath=/app/privatedb"
      - "--cooStatePath=/app/state/coordinator.state"
    profiles:
      - bootstrap
  ##################################################################
  #  EDCAS                                                         #
  ##################################################################
  generate_public_key:
    container_name: generate_public_key
    image: frankthefish/inx-eddn:latest
    environment:
      - "NODE_URL=https://api.edcas.de:443"
      - "ZEROMQ_URL=tcp://eddn.edcd.io:9500"
      - "WALLET_PASSWORD=testwallet"
      - "WALLET_PATH=wallet/wallet.stronghold"
      - "NUM_OF_WORKERS=4"
      - "KEY_SAVE_LOCATION=public_key/public_key"
    command:
      - "./inx-eddn"
      - "--saveKey"
    volumes:
      - ./inx-eddn/wallet:/app/wallet
      - ./inx-eddn/public_key:/app/public_key
    profiles:
      - gen_public_key
  inx-eddn:
    container_name: inx-eddn
    image: frankthefish/inx-eddn:latest
    networks:
      edcas_net:
    environment:
      - "NODE_URL=https://api.edcas.de"
      - "ZEROMQ_URL=tcp://eddn.edcd.io:9500"
      - "WALLET_PASSWORD=testwallet"
      - "WALLET_PATH=wallet/wallet.stronghold"
      - "NUM_OF_WORKERS=4"
    restart: always
    volumes:
      - ./inx-eddn/wallet:/app/wallet
    profiles:
      - edcas
  postgres:
    image: 'postgres:latest'
    env_file:
      - .postgres_env
    environment:
      - "POSTGRES_DB=edcas"
    networks:
      edcas_net:
    volumes:
      - ./postgres/:/var/lib/postgresql/data/
    profiles:
      - edcas
  inx-edcas-indexer:
    container_name: inx-edcas-indexer
    image: frankthefish/inx-edcas-indexer:latest
    networks:
      edcas_net:
    env_file:
      - .postgres_env
      - .public_key_env
    environment:
      - "NODE_URL=https://api.edcas.de"
      - "NUM_OF_WORKERS=4"
      - "DATABASE_PORT=5432"
      - "DATABASE_HOST=172.18.211.40"
      - "DATABASE_NAME=edcas"
      - "TAGS=EDDN,SCAN,FSDJUMP,LOCATION,CARRIERJUMP,FSSBODYSIGNALS,SAASIGNALSFOUND"
    restart: always
    volumes:
      - ./inx-eddn/wallet:/app/wallet
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    profiles:
      - edcas
networks:
  edcas_net: